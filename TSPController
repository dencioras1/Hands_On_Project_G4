import time as Time
import os
import cv2
import numpy as np
import pygame
from support_functions import *
import AudioController
import threading

# Audio Controller object
audio_controller = AudioController.AudioController(44100, 512)

# Constants for grid size
ROWS, COLUMNS = 27, 19

TSP = TSPDecoder(rows=ROWS, columns=COLUMNS)
grid_current = np.zeros((ROWS, COLUMNS), dtype=np.uint8)
grid = np.zeros((ROWS, COLUMNS), dtype=np.uint8)

# Sensitivity for the TSP, higher value -> less sensitive
TSP_sensitivity = 70

# Variables for quadrant states (tracks if a quadrant is currently pressed)
quadrant_states = {
    "top_left": False,
    "top_right": False,
    "bottom_left": False,
    "bottom_right": False,
}

# Recording state tracking
recording_active = False
recording_timer = None

# Define constants for Pygame visualization
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 600

pygame.init()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Sensor Grid Visualization")
clock = pygame.time.Clock()

display_running = True

def check_input(quadrant):
    return np.any(quadrant)

def draw_quad():
    if quadrant_states["top_left"]:
        pygame.draw.rect(screen, (255, 255, 255), [0, 0, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2])
    if quadrant_states["top_right"]:
        pygame.draw.rect(screen, (255, 255, 255), [SCREEN_WIDTH / 2, 0, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2])
    if quadrant_states["bottom_left"]:
        pygame.draw.rect(screen, (255, 255, 255), [0, SCREEN_HEIGHT / 2, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2])
    if quadrant_states["bottom_right"]:
        pygame.draw.rect(screen, (255, 255, 255), [SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2])

def start_recording():
    global recording_active
    if not recording_active:
        print("Recording started.")
        recording_active = True

def stop_recording():
    global recording_active
    global recording_timer
    if recording_active:
        print("Recording stopped.")
        audio_controller.stop_recording_and_save(silence_duration=0)
        recording_active = False
        recording_timer = None

while display_running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            display_running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_q:
                if not quadrant_states["bottom_left"]:
                    print("Bottom Left Pressed!")
                    audio_controller.play_kick()
                    start_recording()
                quadrant_states["bottom_left"] = True
                any_quadrant_active = True
            elif event.key == pygame.K_k:
                print("k pressed, bitch.")

    if TSP.frame_available:
        grid_current = TSP.readFrame()

        for row in range(ROWS):
            for column in range(COLUMNS):
                if grid_current[row][column] >= TSP_sensitivity:
                    grid[row][column] = grid_current[row][column]
                else:
                    grid[row][column] = 0

        top_left_quad = grid[:13, :9]
        top_right_quad = grid[:13, 10:]
        bottom_left_quad = grid[14:, :9]
        bottom_right_quad = grid[14:, 10:]

        any_quadrant_active = False

        # Top Left
        if check_input(top_left_quad):
            if not quadrant_states["top_left"]:
                print("Top Left Pressed!")
            quadrant_states["top_left"] = True
            any_quadrant_active = True
        else:
            if quadrant_states["top_left"]:
                print("Top Left Released!")
            quadrant_states["top_left"] = False

        # Top Right
        if check_input(top_right_quad):
            if not quadrant_states["top_right"]:
                print("Top Right Pressed!")
            quadrant_states["top_right"] = True
            any_quadrant_active = True
        else:
            if quadrant_states["top_right"]:
                print("Top Right Released!")
            quadrant_states["top_right"] = False

        # Bottom Left (Kick)
        if check_input(bottom_left_quad):
            if not quadrant_states["bottom_left"]:
                print("Bottom Left Pressed!")
                audio_controller.play_kick()
                start_recording()
            quadrant_states["bottom_left"] = True
            any_quadrant_active = True
        else:
            if quadrant_states["bottom_left"]:
                print("Bottom Left Released!")
            quadrant_states["bottom_left"] = False

        # Bottom Right (Clap)
        if check_input(bottom_right_quad):
            if not quadrant_states["bottom_right"]:
                print("Bottom Right Pressed!")
                audio_controller.play_clap()
                start_recording()
            quadrant_states["bottom_right"] = True
            any_quadrant_active = True
        else:
            if quadrant_states["bottom_right"]:
                print("Bottom Right Released!")
            quadrant_states["bottom_right"] = False

        # Handle recording timer based on activity
        if not any_quadrant_active and recording_active and recording_timer is None:
            print("No quadrant active. Stopping recording after delay.")
            recording_timer = threading.Timer(5.0, stop_recording)
            recording_timer.start()
        elif any_quadrant_active and recording_timer is not None:
            print("Activity detected. Cancelling stop timer.")
            recording_timer.cancel()
            recording_timer = None

    screen.fill((0, 0, 0))
    draw_quad()

    clock.tick(120)
    pygame.display.flip()

pygame.quit()
